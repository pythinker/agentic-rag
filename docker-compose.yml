volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:
  postgres-data:
  pgadmin-data:

networks:
  demo:
  postgres-network:
    driver: bridge

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['demo']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - OLLAMA_HOST=host.docker.internal:11434
  env_file:
    - .env

services:
  postgres:
    image: postgres:16-alpine
    networks: ['demo', 'postgres-network']
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  # New service to initialize the n8n database if it doesn't exist
  postgres-init-db:
    image: postgres:latest # Use the postgres image as it includes psql
    networks: ['postgres-network'] # Needs to be on the same network as postgres
    depends_on:
      postgres:
        condition: service_healthy # Wait for the postgres container to be healthy
    environment:
      # Pass necessary credentials to the init service
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # No need for POSTGRES_DB here, we connect to 'postgres' db to create 'n8n'
    command:
      # Script to wait for postgres, check if 'n8n' db exists, and create it if necessary
      ["sh", "-c", "echo 'Initializing n8n database...'; until pg_isready -h postgres -U ${POSTGES_USER:-postgres} -d ${POSTGRES_DB:-postgres}; do echo 'Waiting for postgres...'; sleep 2; done; DB_EXISTS=$(psql -h postgres -U ${POSTGRES_USER} -d postgres -tAc \"SELECT 1 FROM pg_database WHERE datname='n8n'\"); if [ \"$DB_EXISTS\" != \"1\" ]; then echo \"Database 'n8n' does not exist. Creating...\"; PGPASSWORD=${POSTGRES_PASSWORD} psql -h postgres -U ${POSTGRES_USER} -d postgres -c \"CREATE DATABASE n8n;\"; echo \"Database 'n8n' created.\"; else echo \"Database 'n8n' already exists.\"; fi; echo 'N8N database initialization complete.'"]

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: pgadminpassword
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    restart: unless-stopped
    networks:
      - postgres-network
    depends_on:
      - postgres

  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/demo-data/credentials && n8n import:workflow --separate --input=/demo-data/workflows"
    volumes:
      - ./n8n/demo-data:/demo-data
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/demo-data:/demo-data
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage
